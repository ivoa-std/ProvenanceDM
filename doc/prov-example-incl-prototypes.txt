# Example: provenance of a stacked image using a provdm-model with prototypes

This examples uses the [PROV-N](http://www.w3.org/TR/2013/REC-prov-n-20130430/) notation of W3C. 


## Descriptions and methods 
These will be referenced by the actual data and activities, thus they **MUST** have a unique identifer; their identifiers or names should probably be related to the IVOA-thesaurus or similar in some way.

#### Fits file description
dataDescription(
  fitsfile_id, 
  [
    type = "fits_file", 
    description = "A file written in the standard data (image) format used in
                   astronomy, according to the FITS standard given in documentation-url",
    documentation-url = "http://fits.gsfc.nasa.gov/fits_standard.html"
  ]
)

#### Software for combining (Is it a parameter? Or attribute to activity?)
dataDescription(
  software_id,
  [
    ucd = "soft.progname",
    type = "text"
  ]
)

#### number of images to combine (parameterDescription)
dataDescription(
  ncombine_id,
  [
    ucd = stat.number,
    vodml:type = ImmediateData,
    type = integer
  ]
)

#### stacking method (Method)
Method(
  image_stacking_method_id,
  [
    activityClass = "image_stacking",
    description = "Combination of multiple different-epoch images to improve 
                   SNR"
  ]
)

*The possible roles for a given method should be predefined, so that everyone is using the same role for the same thing. But don't need them explicitely here, I think. Using a vocabulary should be enough.*


#### dataDescriptionMaps
*These are the actual data descriptions referencing to the pre-defined roles, connecting dataDescriptions with the corresponding method.*
*Use following scheme:*
  `dataDescriptionMap(id, dataDescriptionId, methodId, [role = roleFromList])`

dataDescriptionMap(
  sourceimage_descmap_id,
  fits_file_id,
  image_stacking_method_id,
  [
    role = "role:source image",
    roleFlag = "input",
    //PDL stuff here??
    //multiplicity?
  ]
)

dataDescriptionMap(
  stacked_descmap_id,
  fits_file_id,
  image_stacking_method_id,
  [
    role = "stacked image"
    roleFlag = "output"
  ]
)

dataDescriptionMap(
  software_descmap_id,
  software_id,
  image_stacking_method_id,
  [
    role = "software"
  ]
)

dataDescriptionMap(
  ncombine_descmap_id,
  ncombine_id,
  image_stacking_method_id,
  [
    role = "ncombine"
  ]
)


## Data and activities
*Use data like entities as described in W3C: id is required, everything else in optional parameter list.*

### The source images
data(
  img500_id, 
  [
    dataDescription = fitsfile_id,
    accessReference = "http://foo.bar/ta220500_1OFCU2als"
  ]
)

data(
  img501_id, 
  [
    dataDescription = fitsfile_id,
    accessReference = "http://foo.bar/ta220501_1OFCU2als"
  ]
)

data(
  img502_id, 
  [
    dataDescription = fitsfile_id,
    accessReference = "http://foo.bar/ta220502_1OFCU2als"
  ]
)

### stacked image
data(
  resultimage_id,
  [
    dataDescription = fitsfile_id,
    accessReference = http://foo.bar/result,
    ###createdFromActivity image_stacking_2014_08_07_id
  ]
)

### software used
*Is this an entity or an agent?*
data(
  softname_id,
  [
    dataDescription = software_id,
    value = "NOAO-IRAF FITS Image Kernel July 2003",
    accessReference = http://noao.org/iraf/v12.3????
  ]
)

### ncombine parameter
data(
  n_id,
  [
    dataDescription = ncombine_id,
    value = 3,
  ]
)

### Activity
activity(
  image_stacking_2014_08_07_id, 
  2014-05-15T03:43:46, 
  -, 
  [
    method = image_stacking_method_id,
    agent = astronomer_id
  ] 

### Agent
agent(
  astronomer_id,
  name = "Jack Astron",
  affiliation = "AIP",
  role = "student"
)

### dataMaps
*Use following scheme:*
`dataMap(dataDescriptionMap_id, dataId, activityId`
*The `dataDescriptionMap` contains all the important additional information about the role of each data-item.*

dataMap(
  sourceimage_descmap_id,
  img500_id,
  image_stacking_2014_08_07_id
)

dataMap(
  sourceimage_descmap_id,
  img501_id,
  image_stacking_2014_08_07_id
)

dataMap(
  sourceimage_descmap_id,
  img502_id,
  image_stacking_2014_08_07_id
)

dataMap(
  stackedimage_descmap_id,
  resultimage_id,
  image_stacking_2014_08_07_id
)

dataMap(
  ncombine_descmap_id,
  n_id,
  image_stacking_2014_08_07_id
)

dataMap(
  software_descmap_id,
  softname_id,
  image_stacking_2014_08_07_id
)


**Problem**
*How can a client know, if the expected value is a reference to another thing or a value? (e.g. with parameter, accessurls). Need something like RefData and ImmediateData??*


## Again, in a more compact form

### Description side ==> may be stored somewhere outside of the file
dataDescription(fitsfile_id, [type = "file:fits", description = "A file written in the standard data (image) format used in astronomy, according to the FITS standard given in documentation-url", documentation-url = "http://fits.gsfc.nasa.gov/fits_standard.html"])

dataDescription(software_id, [ucd = "soft.progname", type = "text"])

dataDescription(ncombine_id, [ucd = stat.number, vodml:type = ImmediateData, type = integer])

method(image_stacking_method_id, [activityClass = "image_stacking", description = "Combination of multiple different-epoch images to improve SNR"])

dataDescriptionMap(sourceimage_descmap_id, fits_file_id, image_stacking_method_id, [role = 'source image'])

dataDescriptionMap(stacked_descmap_id, fits_file_id, image_stacking_method_id, [role = 'stacked image'])

dataDescriptionMap(software_descmap_id, software_id, image_stacking_method_id, [role = 'software'])

dataDescriptionMap(ncombine_descmap_id, ncombine_id, image_stacking_method_id, [role = 'ncombine'])

## Data, activities ==> possibly stored in fits headers
data(img500_id, [dataDescription = fitsfile_id, accessReference = "http://foo.bar/ta220500_1OFCU2als"])

data(img501_id, [dataDescription = fitsfile_id, accessReference = "http://foo.bar/ta220501_1OFCU2als"])

data(img502_id, [dataDescription = fitsfile_id, accessReference = "http://foo.bar/ta220502_1OFCU2als"])

data(resultimage_id, [dataDescription = fitsfile_id, accessReference = http://foo.bar/result, ###createdFromActivity image_stacking_2014_08_07_id])

data(softname_id, [dataDescription = software_id, value = "NOAO-IRAF FITS Image Kernel July 2003", accessReference = http://noao.org/iraf/v12.3????])

data(n_id, [dataDescription = ncombine_id, value = 3])

activity(image_stacking_2014_08_07_id, 2014-05-15T03:43:46, -, [method = image_stacking_method_id, agent = astronomer_id] 

agent(astronomer_id, name = "Jack Astron", affiliation = "AIP", role = "student")

dataMap(sourceimage_descmap_id, img500_id, image_stacking_2014_08_07_id)
dataMap(sourceimage_descmap_id, img501_id, image_stacking_2014_08_07_id)
dataMap(sourceimage_descmap_id, img502_id, image_stacking_2014_08_07_id)
dataMap(stackedimage_descmap_id, resultimage_id, image_stacking_2014_08_07_id)
dataMap(ncombine_descmap_id, n_id, image_stacking_2014_08_07_id)
dataMap(software_descmap_id, softname_id, image_stacking_2014_08_07_id)